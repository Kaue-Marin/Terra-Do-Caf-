declare const LionInput_base: import("@open-wc/dedupe-mixin").Constructor<import("@lion/form-core/types/NativeTextFieldMixinTypes").NativeTextField> & import("@open-wc/dedupe-mixin").Constructor<import("@lion/form-core/types/NativeTextFieldMixinTypes").NativeTextFieldHost> & import("@lion/form-core/types/NativeTextFieldMixinTypes").NativeTextFieldHost & typeof import("@lion/form-core/types/NativeTextFieldMixinTypes").NativeTextField;
/**
 * LionInput: extension of lion-field with native input element in place and user friendly API.
 *
 * @customElement lion-input
 */
export class LionInput extends LionInput_base {
    static get properties(): {
        /**
         * A Boolean attribute which, if present, indicates that the user should not be able to edit
         * the value of the input. The difference between disabled and readonly is that read-only
         * controls can still function, whereas disabled controls generally do not function as
         * controls until they are enabled.
         *
         * (From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)
         */
        readOnly: {
            type: BooleanConstructor;
            attribute: string;
            reflect: boolean;
        };
        type: {
            type: StringConstructor;
            reflect: boolean;
        };
        placeholder: {
            type: StringConstructor;
            reflect: boolean;
        };
    };
    type: string;
    placeholder: string;
    __delegateReadOnly(): void;
}
export {};
