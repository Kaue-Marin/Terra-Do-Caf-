declare const LionButton_base: typeof LitElement & import("@open-wc/dedupe-mixin").Constructor<import("@lion/core/types/SlotMixinTypes").SlotHost> & typeof import("@lion/core/types/SlotMixinTypes").SlotHost & import("@open-wc/dedupe-mixin").Constructor<import("@lion/core/types/DisabledWithTabIndexMixinTypes").DisabledWithTabIndexHost> & import("@open-wc/dedupe-mixin").Constructor<import("@lion/core/types/DisabledMixinTypes").DisabledHost>;
export class LionButton extends LionButton_base {
    static get properties(): {
        role: {
            type: StringConstructor;
            reflect: boolean;
        };
        active: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        type: {
            type: StringConstructor;
            reflect: boolean;
        };
    };
    static get styles(): import("@lion/core").CSSResult[];
    _beforeTemplate(): import("@lion/core").TemplateResult;
    _afterTemplate(): import("@lion/core").TemplateResult;
    /** @type {HTMLButtonElement} */
    get _nativeButtonNode(): HTMLButtonElement;
    role: string;
    type: string;
    active: boolean;
    _buttonId: string;
    /** @type {HTMLButtonElement} */
    __submitAndResetHelperButton: HTMLButtonElement;
    /**
     * Prevents that someone who listens outside or on form catches the click event
     * @param {Event} e
     */
    __preventEventLeakage(e: Event): void;
    /**
     * Delegate click, by flashing a native button as a direct child
     * of the form, and firing click on this button. This will fire the form submit
     * without side effects caused by the click bubbling back up to lion-button.
     * @param {Event} ev
     */
    __clickDelegationHandler(ev: Event): Promise<void>;
    __setupDelegationInConstructor(): void;
    __setupEvents(): void;
    __teardownEvents(): void;
    __mousedownHandler(): void;
    /**
     * @param {KeyboardEvent} e
     */
    __keydownHandler(e: KeyboardEvent): void;
    /**
     * @param {KeyboardEvent} e
     */
    __keyupHandler(e: KeyboardEvent): void;
    __setupSubmitAndResetHelperOnConnected(): void;
    _form: HTMLFormElement | null | undefined;
    __teardownSubmitAndResetHelperOnDisconnected(): void;
}
import { LitElement } from "@lion/core";
export {};
